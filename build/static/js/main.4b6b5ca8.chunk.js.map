{"version":3,"sources":["actions/index.js","containers/ChocolateBox.jsx","containers/Chocolate.jsx","components/ChocolateList.jsx","App.js","reducers/redChocolateBox.js","reducers/index.js","serviceWorker.js","index.js"],"names":["addChocolate","name","type","eatChocolates","eatOne","index","connect","state","redChocolateBox","dispatch","bindActionCreators","props","chocolateBoxes","Array","from","length","console","log","react_default","a","createElement","className","onClick","map","item","key","ChocolateList","importedChocolates","obj","src_containers_Chocolate","id","color","App","src_components_ChocolateList","src_containers_ChocolateBox","initialState","RedChocolateBox","arguments","undefined","action","indexOf","Object","toConsumableArray","concat","splice","allReducers","combineReducers","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0dAAaA,SAAe,SAACC,GAAD,MAAW,CACrCC,KAAM,gBACND,UAGWE,EAAgB,iBAAO,CAClCD,KAAM,mBAGKE,EAAS,SAACC,GAAD,MAAY,CAChCH,KAAM,UACNG,UC4BF,IAIeC,cAVf,SAAcC,GACZ,MAAO,CACLC,gBAAkBD,EAAMC,kBAIf,SAACC,GACZ,OAAOC,YAAmB,CAACP,gBAAeC,UAASK,IAGtCH,CApCM,SAACK,GAEpB,IAAMC,EAAiBC,MAAMC,KAAK,CAACC,OAAS,KAG5C,OAFAC,QAAQC,IAAI,cAAeN,EAAMH,iBAG/BU,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMX,EAAMR,iBAAgBkB,UAAU,WAAvD,kBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXT,EAAeW,IAAK,SAACC,EAAMnB,GAAP,OACpBa,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAMX,EAAMP,OAAOC,IAAQoB,IAAKpB,EAAOA,MAAOA,EAAOgB,UACjEV,EAAMH,gBAAgBH,GACtB,cAAgBM,EAAMH,gBAAgBH,GACpC,2BCACC,kBAAQ,KANvB,SAAcG,GACZ,OAAOC,YAAmB,CAACV,gBAAeS,IAK7BH,CAhBG,SAACK,GAAD,OAChBO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXV,EAAMV,KACPiB,EAAAC,EAAAC,cAAA,UACEE,QAAU,kBAAMX,EAAMX,aAAaW,EAAMV,OAAOoB,UAAU,aAD5D,gBCWWK,SAhBO,kBACpBR,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAEIO,EAAmBJ,IAAK,SAAAK,GAAG,OACzBV,EAAAC,EAAAC,cAACS,EAAD,CAAWJ,IAAKG,EAAIE,GAAI7B,KAAM2B,EAAI3B,KAAM8B,MAAOH,EAAIG,eCEhDC,SARH,kBACNd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,gBCVFC,EAAe,GAuBNC,EArBS,WAAkC,IAAjC7B,EAAiC8B,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAzBF,EAAcI,EAAWF,UAAAtB,OAAA,EAAAsB,UAAA,QAAAC,EACxD,OAAQC,EAAOrC,MACb,IAAK,gBAMH,OALGK,EAAMiC,QAAQ,OAAS,EACxBjC,EAAMA,EAAMiC,QAAQ,OAASD,EAAOtC,KAEpCM,EAAKkC,OAAAC,EAAA,EAAAD,CAAQlC,GAARoC,OAAA,CAAeJ,EAAOtC,OAEtBwC,OAAAC,EAAA,EAAAD,CAAIlC,GAEb,IAAK,UAEH,OADAA,EAAMqC,OAAOL,EAAOlC,MAAM,EAAG,MACtBoC,OAAAC,EAAA,EAAAD,CAAKlC,GAEd,IAAK,iBACH,OAAO4B,EACT,QACE,OAAO5B,ICXEsC,EAJKC,YAAgB,CAChCtC,gBAAkB4B,ICOFW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECLAC,EAAQC,YAAYR,GAE1BS,IAASC,OACPrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAUJ,MAAOA,GACflC,EAAAC,EAAAC,cAACqC,EAAD,OACWC,SAASC,eAAe,SD+GjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b6b5ca8.chunk.js","sourcesContent":["export const addChocolate = (name) => ({\n  type: 'ADD_CHOCOLATE',\n  name,\n});\n\nexport const eatChocolates = () => ({\n  type: 'EAT_EVERYTHING',\n});\n\nexport const eatOne = (index) => ({\n  type: 'EAT_ONE',\n  index\n});","import React from 'react';\nimport './ChocolateBox.css';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { eatChocolates, eatOne } from \"../actions\";\n\nconst ChocolateBox = (props) => {\n\n  const chocolateBoxes = Array.from({length : 12});\n  console.log('state choco', props.redChocolateBox);\n\n  return (\n    <section className=\"ChocolateBox\" >\n      <h2>Compose your Chocolate Box ...</h2>\n      <h3>then click on a chocolate to eat it !</h3>\n      <button onClick={() => props.eatChocolates()}className=\"eat-btn\">\n        EAT THEM ALL !\n      </button>\n      <div className=\"div-chocobox\">\n        { chocolateBoxes.map( (item, index) => \n          <div onClick={() => props.eatOne(index)} key={index} index={index} className={ \n            props.redChocolateBox[index]?\n            'box-square ' + props.redChocolateBox[index]\n            : 'box-square'} >\n          </div>\n        )}\n      </div>\n    </section>\n  )\n};\n\n\nfunction mstp(state) {\n  return {\n    redChocolateBox : state.redChocolateBox\n  };\n}\n\nconst mdtp = (dispatch) => {\n  return bindActionCreators({eatChocolates, eatOne}, dispatch);\n}\n\nexport default connect(mstp, mdtp)(ChocolateBox);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { addChocolate } from '../actions'\n\nimport './Chocolate.css';\n\nconst Chocolate = (props) => (\n  <li className='Chocolate'>\n    {props.name}\n    <button\n      onClick={ () => props.addChocolate(props.name)} className='choco-btn'\n    >+</button>\n  </li>\n\n);\n\nfunction mdtp(dispatch) {\n  return bindActionCreators({addChocolate}, dispatch);\n};\n\n\n\nexport default connect(null,mdtp)(Chocolate);","import React from 'react';\nimport Chocolate from '../containers/Chocolate';\nimport importedChocolates from '../chocolates.json';\n\nimport './ChocolateList.css';\n\nconst ChocolateList = () => (\n  <section className=\"ChocolateList\" >\n    <div className=\"list-content\">\n      <h3>Pick a chocolate:</h3>\n      <ul>\n        {\n          importedChocolates.map( obj => \n            <Chocolate key={obj.id} name={obj.name} color={obj.color}/>\n          )\n        }\n      </ul>\n    </div>\n  </section>\n  \n);\n\nexport default ChocolateList;","import React from 'react';\nimport ChocolateBox from './containers/ChocolateBox';\nimport ChocolateList from './components/ChocolateList';\n\nimport './App.css';\n\n\nconst App = () => (\n      <div className=\"App\">\n        <ChocolateList />\n        <ChocolateBox />\n       \n      </div>\n  );\n \nexport default App;\n","const initialState = [];\n\nconst RedChocolateBox = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_CHOCOLATE' :\n      if(state.indexOf(null) >= 0) {\n        state[state.indexOf(null)] = action.name;\n      } else {\n        state = [ ...state, action.name];\n      }\n      return [...state];\n\n    case 'EAT_ONE' :\n      state.splice(action.index,1, null);\n      return [ ...state];\n\n    case 'EAT_EVERYTHING' :\n      return initialState;\n    default :\n      return state; \n  }\n};\n\nexport default RedChocolateBox;","import { combineReducers } from 'redux';\n\nimport RedChocolateBox from './redChocolateBox';\n\nconst allReducers = combineReducers({\n    redChocolateBox : RedChocolateBox\n});\n\nexport default allReducers;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport allReducers from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}